/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.game.word_guessing_game;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Dev Gerald
 */
public class Gameplay extends javax.swing.JFrame {

    /**
     * Creates new form Gameplay
     */
    public Gameplay() {
        initComponents();
    }
    
    // Variable Declaration
    // To store the words to be guessed
    String[] words_to_be_guessed = {"PROGRAMMING", "CODING", "METHOD", "INHERITANCE"}; 
    // To store the choosen word to be guessed
    String word_to_be_guessed;
    // To store the statistics of the game that need to be display after termination of program
    List statistics = new ArrayList();
    // To store the guess count per word
    int guessCount;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameplayPanel = new javax.swing.JPanel();
        boardTextField = new javax.swing.JTextField();
        attempsTitleLabel = new javax.swing.JLabel();
        guessCountLabel = new javax.swing.JLabel();
        guessButton = new javax.swing.JButton();
        guessTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        guessResultTextField = new javax.swing.JTextField();
        title2Panel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        title1Panel = new javax.swing.JPanel();
        numberTitleLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        gameplayPanel.setBackground(new java.awt.Color(255, 255, 255));

        boardTextField.setEditable(false);
        boardTextField.setBackground(new java.awt.Color(204, 255, 204));
        boardTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        boardTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        boardTextField.setText("Click Start");
        boardTextField.setFocusable(false);
        boardTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boardTextFieldActionPerformed(evt);
            }
        });

        attempsTitleLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        attempsTitleLabel.setText("Guess:");

        guessCountLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        guessCountLabel.setText("0");

        guessButton.setText("Guess");
        guessButton.setEnabled(false);
        guessButton.setFocusable(false);
        guessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guessButtonActionPerformed(evt);
            }
        });

        guessTextField.setEnabled(false);
        guessTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guessTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Guess here");

        startButton.setForeground(new java.awt.Color(102, 102, 102));
        startButton.setText("Start");
        startButton.setFocusable(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        guessResultTextField.setEditable(false);
        guessResultTextField.setBackground(java.awt.Color.gray);
        guessResultTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        guessResultTextField.setText("Guess result");
        guessResultTextField.setFocusable(false);

        javax.swing.GroupLayout gameplayPanelLayout = new javax.swing.GroupLayout(gameplayPanel);
        gameplayPanel.setLayout(gameplayPanelLayout);
        gameplayPanelLayout.setHorizontalGroup(
            gameplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gameplayPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(gameplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gameplayPanelLayout.createSequentialGroup()
                        .addGroup(gameplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(boardTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(gameplayPanelLayout.createSequentialGroup()
                                .addComponent(attempsTitleLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(guessCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(95, 95, 95))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gameplayPanelLayout.createSequentialGroup()
                        .addComponent(guessTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(180, 180, 180))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gameplayPanelLayout.createSequentialGroup()
                        .addGroup(gameplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(guessButton, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                            .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(246, 246, 246))))
            .addGroup(gameplayPanelLayout.createSequentialGroup()
                .addGroup(gameplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gameplayPanelLayout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addComponent(jLabel1))
                    .addGroup(gameplayPanelLayout.createSequentialGroup()
                        .addGap(236, 236, 236)
                        .addComponent(guessResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        gameplayPanelLayout.setVerticalGroup(
            gameplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameplayPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(guessResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boardTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gameplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attempsTitleLabel)
                    .addComponent(guessCountLabel))
                .addGap(18, 18, 18)
                .addComponent(guessTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(guessButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startButton)
                .addGap(18, 18, 18))
        );

        title2Panel.setBackground(new java.awt.Color(204, 204, 204));

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        titleLabel.setText("Word Guessing Game");

        descriptionLabel.setText("Guess the secret word");

        javax.swing.GroupLayout title2PanelLayout = new javax.swing.GroupLayout(title2Panel);
        title2Panel.setLayout(title2PanelLayout);
        title2PanelLayout.setHorizontalGroup(
            title2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(title2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(title2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(170, Short.MAX_VALUE))
        );
        title2PanelLayout.setVerticalGroup(
            title2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(title2PanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionLabel)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        title1Panel.setBackground(new java.awt.Color(204, 255, 204));

        numberTitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        numberTitleLabel.setText("WORD");

        javax.swing.GroupLayout title1PanelLayout = new javax.swing.GroupLayout(title1Panel);
        title1Panel.setLayout(title1PanelLayout);
        title1PanelLayout.setHorizontalGroup(
            title1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(title1PanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(numberTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );
        title1PanelLayout.setVerticalGroup(
            title1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(title1PanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(numberTitleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(title1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(title2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(gameplayPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(title1Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(title2Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(gameplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void boardTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boardTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boardTextFieldActionPerformed

    // When guess button is clicked
    private void guessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guessButtonActionPerformed
        // Add 1 to the guess count
        guessCount++;
        // Display the new guess count
        guessCountLabel.setText(String.valueOf(guessCount));
        
        // Check if the word guesses by the player matches the word to be guess
        if(guessTextField.getText().toUpperCase().equals(word_to_be_guessed)){
            // If so then display corrent to the result
            guessResultTextField.setText("Correct");
            // Change bg to green
            guessResultTextField.setBackground(Color.green);
            // Enable start button to be able to start again
            startButton.setEnabled(true);
            // Disable the guess button
            guessButton.setEnabled (false);
            // Disable the guess textfield
            guessTextField.setEnabled(false);
            
            // To record the game for game statistics
            // This is to check if the word to be guess is already record to prevent duplicate
            if(statistics.contains(word_to_be_guessed)){
                // If already recorded find the index of the guess count
                int guessCountIndex = statistics.indexOf(word_to_be_guessed)+1;
                // Add the previous guuess count to the current guess count
                int totalGuess = Integer.parseInt(statistics.get(guessCountIndex).toString()) + guessCount;
                // Then add th new value to the same index
                statistics.set(guessCountIndex, totalGuess);
            } else {
                // If not yet recorder add the word then the guess count
                statistics.add(word_to_be_guessed);
                statistics.add(guessCount);
            }
        } else {
            // If the player guess is incorrect
            // Display Wrong in the result text field
            guessResultTextField.setText("Wrong! Try again");
            // Change bg to red
            guessResultTextField.setBackground(Color.red);
        }
    }//GEN-LAST:event_guessButtonActionPerformed

    //If the start button is clicked
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // To generate random number within the range of words to be guessed
        // This is use to randomly select index in the words to be guessed array then use that as word to be guessed
        int rand = (int) (Math.random() * words_to_be_guessed.length);
        // To get the random value from the words to be guess
        word_to_be_guessed = words_to_be_guessed[rand];
        // This call the shuffle function
        // shuffle function shuffle the word that is randomly choosen to be guessed
        boardTextField.setText(shuffle(word_to_be_guessed));
        // to disable start button
        startButton.setEnabled(false);
        // to enable guess button
        guessButton.setEnabled (true);
        // To enable guess text field
        guessTextField.setEnabled(true);
        // To reset guess count
        guessCount = 0;
        // To display the new guess count
        guessCountLabel.setText(String.valueOf(guessCount));
        // To reset the guess text field
        guessTextField.setText("");
        // To reset teh guess text field
        guessResultTextField.setText("Guess result");
        guessResultTextField.setBackground(Color.gray);
        
    }//GEN-LAST:event_startButtonActionPerformed

    private void guessTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guessTextFieldActionPerformed

    }//GEN-LAST:event_guessTextFieldActionPerformed

    // When the user terminate or closed the program or game
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // This format the statistics to be displayed
        String output = String.format( "%-30s%s\n", "Words Played", "Guesses" );
        for(int i = 0; i<statistics.size(); i+=2){
            String wordsPlayed = statistics.get(i).toString();
            String guesses = statistics.get(i+1).toString();

            output += String.format( "%-30s%s\n", wordsPlayed, guesses );       
        }
        // This is use to display option after the user click closed button
        JOptionPane.showMessageDialog(null, output, "Game Statistics", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_formWindowClosing

    // Program to shuffle word
    // Get a random word from the choosen word then append it to the new shuffle word
    public String shuffle( String str ){
        // To store the initial word
        StringBuffer word = new StringBuffer(str);
        
        // To store the final and shuffle word
        StringBuffer shuffleWord = new StringBuffer();
        
        // To add each randomly choosen char from the initial word(word) to the final word(shuffleWord)
        while (word.length() != 0){
            int index = (int) (Math.random() * word.length());
            char c = word.charAt(index);
            shuffleWord.append(c);
            word.deleteCharAt(index);
        }
        
        // To return the shuffle word
        return shuffleWord.toString();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gameplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gameplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gameplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gameplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gameplay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel attempsTitleLabel;
    private javax.swing.JTextField boardTextField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JPanel gameplayPanel;
    private javax.swing.JButton guessButton;
    private javax.swing.JLabel guessCountLabel;
    private javax.swing.JTextField guessResultTextField;
    private javax.swing.JTextField guessTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel numberTitleLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JPanel title1Panel;
    private javax.swing.JPanel title2Panel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
